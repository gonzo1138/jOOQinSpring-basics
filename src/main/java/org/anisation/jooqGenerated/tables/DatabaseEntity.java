/*
 * This file is generated by jOOQ.
 */
package org.anisation.jooqGenerated.tables;


import java.util.Arrays;
import java.util.List;

import org.anisation.jooqGenerated.Keys;
import org.anisation.jooqGenerated.Public;
import org.anisation.jooqGenerated.tables.records.DatabaseEntityRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatabaseEntity extends TableImpl<DatabaseEntityRecord> {

    private static final long serialVersionUID = 992215425;

    /**
     * The reference instance of <code>public.database_entity</code>
     */
    public static final DatabaseEntity DATABASE_ENTITY = new DatabaseEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatabaseEntityRecord> getRecordType() {
        return DatabaseEntityRecord.class;
    }

    /**
     * The column <code>public.database_entity.id</code>.
     */
    public final TableField<DatabaseEntityRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.database_entity.text_field</code>.
     */
    public final TableField<DatabaseEntityRecord, String> TEXT_FIELD = createField(DSL.name("text_field"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.database_entity.number_field</code>.
     */
    public final TableField<DatabaseEntityRecord, Long> NUMBER_FIELD = createField(DSL.name("number_field"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.database_entity</code> table reference
     */
    public DatabaseEntity() {
        this(DSL.name("database_entity"), null);
    }

    /**
     * Create an aliased <code>public.database_entity</code> table reference
     */
    public DatabaseEntity(String alias) {
        this(DSL.name(alias), DATABASE_ENTITY);
    }

    /**
     * Create an aliased <code>public.database_entity</code> table reference
     */
    public DatabaseEntity(Name alias) {
        this(alias, DATABASE_ENTITY);
    }

    private DatabaseEntity(Name alias, Table<DatabaseEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private DatabaseEntity(Name alias, Table<DatabaseEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DatabaseEntity(Table<O> child, ForeignKey<O, DatabaseEntityRecord> key) {
        super(child, key, DATABASE_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<DatabaseEntityRecord> getPrimaryKey() {
        return Keys.DATABASE_ENTITY_PKEY;
    }

    @Override
    public List<UniqueKey<DatabaseEntityRecord>> getKeys() {
        return Arrays.<UniqueKey<DatabaseEntityRecord>>asList(Keys.DATABASE_ENTITY_PKEY);
    }

    @Override
    public DatabaseEntity as(String alias) {
        return new DatabaseEntity(DSL.name(alias), this);
    }

    @Override
    public DatabaseEntity as(Name alias) {
        return new DatabaseEntity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DatabaseEntity rename(String name) {
        return new DatabaseEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DatabaseEntity rename(Name name) {
        return new DatabaseEntity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
